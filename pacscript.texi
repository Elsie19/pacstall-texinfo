@node Pacscript, Sample Script, Files, Top
@chapter Pacscript
This chapter is a reference to the pacscript format.

@menu
* Sample Script:: Script with every key included.
* Keys:: List of keys and descriptions of their functionality.
@end menu

@node Sample Script, Keys, Pacscript,
@section Sample Script

Below is a list of every base variable/function/array. Each will be explained later. @xref{Keys}.

@example
pkgbase="bar" # @xref{pkgbase}
pkgname=("foo" "barfoo") # @xref{pkgname}
repology=("project: bar") # @xref{repology}
arch=('any' 'amd64' 'arm64') # @xref{arch}
pkgver="1.0.0" # @xref{pkgver}
pkgrel="3" # @xref{pkgrel}
epoch="4" # @xref{epoch}
url='https://foo.com/bar' # @xref{url}
source=(
  "https://github.com/Elsie19/foo/archive/refs/tags/$@{pkgver@}.zip"
  "https://github.com/Elsie19/foo/archive/refs/tags/foo.desktop"
)
(...)sums=(
    "9cc57f2ca39c2d81aed7e3d82af0b5711863bd3403bb8f024c4c3b4ecf9652a4"
    'SKIP'
)
nosubmodules=("foo")
noextract=("bar")
depends=("kdenlive")
makedepends=("ed>=1.20.1" "gcc")
checkdepends=("just")
optdepends=("bar: not foo"
  "alacritty: a blazing fast terminal"
)
pacdeps=("dmenu" "tuner")
breaks=("libbar-git")
conflicts=("libfoo-git" "libfoo-bin" "libfoo-app")
replaces=("alacritty")
gives="libfoo"
pkgdesc="Ultimate program capable of foo and bar
Here is a long description started on a newline."
backup=('usr/share/pacstall/repo/pacstallrepo')
priority='essential'
maintainer=(
    "Mr. Person <mr.person@@protonmail.com>"
    "Other person <other@@gmail.com>"
)
mask=('fizzle')
provides=('foo')
incompatible=('debian:stretch' 'debian:sid' '*:jammy' '*:20.04') # @xref{incompatible}
compatible=('debian:stretch' 'debian:sid' '*:jammy' '*:20.04') # @xref{compatible}
license=('LGPL-2.1-or-later')
external_connection=true

prepare() @{
  cd "$@{pkgname@}-$@{pkgver@}"
  ./autogen.sh
  ./configure
@}

build() @{
  cd "$@{pkgname@}-$@{pkgver@}"
  make -j"$@{NCPU@}" # Use this wherever you'd usually use $(nproc)
@}

check() @{
  cd "$@{pkgname@}-$@{pkgver@}"
  make checks
@}

package() @{
  cd "$@{pkgname@}-$@{pkgver@}"
  # It is recommended for paths to be condensed with
  # variables and to be wrapped by double quotes
  make install DESTDIR="$@{pkgdir@}"

  # If the package comes already compiled, use 'install'
  install -Dm755 "$@{pkgname@}" -t "$@{pkgdir@}/usr/bin"
@}

pre_install() @{
  echo "Do pre-unpacking stuff here"
@}

pre_upgrade() @{
  # run if a previous version of this package exists
  echo "Do pre-unpacking stuff here"
@}

pre_remove() @{
  # remove extra directories before an upgrade or removal
  rm -rf somedir
@}

post_install() @{
  echo "Do post-unpacking stuff here"
@}

post_upgrade() @{
  # run if a previous version of this package exists
  echo "Do post-unpacking stuff here"
@}

post_remove() @{
  # remove directories that are not removed during removal
  rm -rf somedir
@}
@end example

@node Keys, , Pacscript,
@section Keys
This section is dedicated to describing every valid key in a pacscript. You will more than likely not use all of these.

@menu
* pkgbase:: Split packaging functionality.
* pkgname:: Naming packages.
* repology:: Linking package versions.
* arch:: Controlling architecture building.
* pkgver:: Controlling versioning.
* pkgrel:: Control pacscript file versioning.
* epoch:: Control forcible upgrades.
* url:: Adding a useful link to project.
* incompatible:: Declaring package incompatiblities.
* compatible:: Declaring package compatiblities.
@end menu

@node pkgbase, pkgname, Sample Script, Sample Script
@subsection pkgbase
If this is not provided in a pacscript, then it is assumed that it is a singular @ref{pkgname}, and a @file{.SRCINFO} file assumes that @ref{pkgbase} is equal to that singular @samp{pkgname}. If using @url{https://wiki.archlinux.org/title/PKGBUILD#pkgbase, package splitting}, @samp{pkgname} is treated like an array, and multiple packages can be built.

To split out the packages, they should define the functions @samp{package_pkgname()}, and can override the following variables inside of them: @samp{gives}, @samp{pkgdesc}, @ref{arch}, @samp{url}, @samp{license}, @samp{depends}, @samp{checkdepends}, @samp{optdepends}, @samp{pacdeps}, @samp{provides}, @samp{checkconflicts}, @samp{conflicts}, @samp{breaks}, @samp{replaces}, @samp{enhances}, @samp{recommends}, @samp{priority}, @samp{backup}, @ref{repology}.

@quotation Caution
In most cases, this should @strong{not} be provided in a pacscript. Only use this for split packages (pacscripts that build multiple packages from the same source).
@end quotation

@node pkgname, repology, pkgbase, Sample Script
@subsection pkgname
This is what Pacstall records as the name of the built package. Use the following naming schema:

@itemize @bullet
@item
Keep it lowercase

@item
Pacscripts that install from a @samp{deb} file should be called @file{pkgname-deb}

@item
Pacscripts that install from a git repository should be called @file{pkgname-git}

@item
Pacscripts that install from an appimage should be called @file{pkgname-app}

@item
Pacscripts that install the binary of the package should be called @file{pkgname-bin}

@item
If a Pacscript does not fall under any of the categories above, use @file{pkgname}
@end itemize

@quotation Important
The package suffix (@samp{-deb}, @samp{-git}, etc) must match the filename of the pacscript. If @code{pkgname="foo-deb"}, the file must be named @file{foo-deb.pacscript}. If there is no suffix, the file should be named @file{foo.pacscript}.
@end quotation

@node repology, arch, pkgname, Sample Script
@subsection repology
This is what @url{https://github.com/pacstall/pacup, Pacup} uses to get the latest version of your packaged program for updating the pacscript. @xref{Top,,, pacup, The Pacup Manual} to know how to add it to your repository.

If the repology variable isn't present in the pacscript, Pacup will refuse to update it.

@node arch, pkgver, repology, Sample Script
@subsection arch
This array is used to define what architectures your pacscripts will work on. Besides the usual architecture specifiers, you have available @samp{any} and @samp{all}:

@multitable @columnfractions 0.1 0.9
@headitem Name @tab Function

@item @samp{any} @tab Package can be compiled on @emph{any} system, but will only run on the compiled architecture (compiled programs)
@item @samp{all} @tab Package can run on @emph{all} systems, regardless of architecture (scripts usually)
@end multitable

Two variables, @samp{$CARCH} and @samp{$AARCH} are also available to you, and are linked to the current running architecture. You can get the value that @samp{$CARCH} would be on your system by running @code{dpkg --print-architecture}, and @samp{$AARCH} by running @code{echo $HOSTTYPE} (with two exceptions, starred below). These are differentiated in the given list with @samp{CARCH}/@samp{AARCH} (if only one is listed, the variables are equal).

Pacstall supports all architectures that have an @url{https://www.debian.org/ports/, official Debian port}. These are currently:

@itemize @bullet
@item
@samp{amd64}/@samp{x86_64}

@item
@samp{arm64}/@samp{aarch64}

@item
@samp{armel}/@samp{arm}

@item
@samp{armhf}/@samp{armv7h}

@item
@samp{i386}/@samp{i686}

@item
@samp{mps64el}

@item
@samp{ppc64el}

@item
@samp{riscv64}

@item
@samp{s390x}
@end itemize

@quotation Important
@c TODO: ADD SOURCE REFERENCE!
While both @samp{$CARCH} and @samp{$AARCH} will always be accessible to a pacscript, only one naming scheme may be used in the arch array. This means you cannot mix and match, like @code{arch=('amd64' 'i686')} or @code{arch=('arm64' 'aarch64')}. The naming scheme used will determine which enhanced arrays will be available. See @samp{source} for more on enhanced arrays.
@end quotation

@node pkgver, pkgrel, arch, Sample Script
@subsection pkgver
This is the version number. It should ideally (but not required) be using @url{https://semver.org/, semver}. As long as the version number can be handled by @code{dpkg --validate-version}, it is valid.

@node pkgrel, epoch, pkgver, Sample Script
@subsection pkgrel
This is used when you wish to trigger an update on users computers but @ref{pkgver} has not been updated. This could be used if you fix a dependency in a pacscript, or perhaps you forgot to add a line to the building process. It is implicitly set to @samp{1} if not included, and should not be included by default. Every time pkgver is updated, @samp{pkgrel} should be removed.

@node epoch, url, pkgrel, Sample Script
@subsection epoch
This variable is used to forcibly upgrade a package in any circumstance. In most cases, a @samp{pkgrel} bump will work just fine, but certain circumstances may require an upgrade that breaks @url{https://wiki.archlinux.org/title/PKGBUILD#epoch, normal comparison logic}. It is assumed to be @samp{0} @url{https://www.debian.org/doc/debian-policy/ch-controlfields.html#version, by default}, and if used, should be a small integer.

@quotation Caution
Use this @emph{sparingly}, as any package using @samp{epoch} cannot remove the @samp{epoch} on the next @samp{pkgver} update.
@end quotation

@node url, incompatible, epoch, Sample Script
@subsection url
This variable is used to show the homepage/website of the package (if any).

@node incompatible, compatible, url, Sample Script
@subsection incompatible
This array is a list of distros/versions that cannot be used to build this package, for example due to outdated dependencies. Elements follow a schema of @samp{$distro:$version}, where either @samp{$distro} or @samp{$version} can be a glob character (@samp{*}), but not both. @samp{$version} can be a distro name (@samp{jammy}, @samp{noble}, @samp{sid}, etc) or a version number (@samp{22.04}, @samp{16.04}, etc).

@node compatible, , incompatible, Sample Script
@subsection compatible
Allowed distros/versions that a package can build on. @xref{incompatible} for more information.
